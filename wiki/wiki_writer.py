import sys, os, io, datetime, json, re

from mwclient import Site
# this requires 'gitpython' library, install it from the terminal using this command:
# pip install gitpython
import git

class WikiWriter:
    def __init__(self, links, extensionLinks, site = None):
        if site != None:
            self.site = site
        else:
            print "Connecting to the Zen Logic wiki..."        
            self.site = Site('wiki.zenlogic.co.uk', path='/')

            # log in
            print "Logging in..."
            self.site.login('Paul', 'il0ved0cumentati0n')

        self.controls = {}
        self.links = links
        self.extensionLinks = extensionLinks
        self.load()

    def load(self):
        pass

    def start_page(self):
        self.wiki_lines = []

    def update_wiki_page(self, page_name):
        # -------------------------------------------------------------------
        # concatenate all the wiki lines into a string, separated by newlines
        # -------------------------------------------------------------------
        wiki_text = '\n'.join(self.wiki_lines)

        # -------------------------------------------------------------------
        # write wiki text to a file named <controlname>.txt
        # -------------------------------------------------------------------
        # output_filename = "%s.txt" % control['objectName']
        # print "Writing wiki text for control '%s' to file '%s'..." % (control['objectName'], output_filename)

        # with io.open(output_filename, mode="wt", encoding="utf-8") as output_file:
        #     output_file.write(wiki_text)

        # -------------------------------------------------------------------
        # update the page in the wiki
        # -------------------------------------------------------------------
        page = self.site.pages[page_name]
        if page.text() == wiki_text:
            pass
            #print "Page content has not changed"
        else:
            print "Updating Wiki page '%s'..." % page_name
            page.save(wiki_text, "Page auto-generated by script")
            #print "Page content updated"

        #self.write_tohtmlfile(wiki_text, "control_%s.html" % control_name)
        
    def create_link_if_found(self, text):
        pre_text = text

        """
        if text == "loadView":
            print "we have a loadView"
        """

        for link in self.links:
            if link["type"] == "dslfile":
                try:
                    search_for = '"%s"' % link["name"]
                    replace_with = '"[[%s|%s]]"' % (link["link"], link["name"])
                    text = text.replace(search_for, replace_with)

                    search_for = '"%s?' % link["name"]
                    replace_with = '"[[%s|%s]]?' % (link["link"], link["name"])
                    text = text.replace(search_for, replace_with)
                except:
                    pass

            if link["type"] == "action":
                search_for = "%s" % link["name"]
                replace_with = "[[%s|%s]]" % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                search_for = '"%s"' % link["name"]
                replace_with = "[[%s|%s]]" % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

            if link["type"] == "control":
                search_for = "%s" % link["name"]
                replace_with = "[[%s|%s]]" % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                # search for the link name in quotes (e.g. '"Button"') and replace it with a page link
                search_for = '"%s"' % link["name"]
                replace_with = '"[[%s|%s]]"' % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                # search for the link name surrounded by spaces (e.g. ' Button ') and replace it with a page link
                search_for = " %s " % link["name"]
                replace_with = " [[%s|%s]] " % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                search_for = " %s." % link["name"]
                replace_with = " [[%s|%s]]." % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                search_for = " %s," % link["name"]
                replace_with = " [[%s|%s]]," % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                search_for = "%s," % link["name"]
                replace_with = "[[%s|%s]]," % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                search_for = " %s" % link["name"]
                replace_with = " [[%s|%s]]," % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

            """
            if link["type"] == "user":
                search_for = "%s" % link["name"]
                replace_with = '<a href="%s">%s</a>' % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)
            """
            
            if link["type"] == "param":
                # search for the link name in quotes (e.g. '"Button"') and replace it with a page link

                search_for = '"%s"' % link["name"]
                replace_with = '"[[%s|%s]]"' % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)
            
            if text != pre_text:
                return text
            
        return text

    def create_quoted_link_if_found(self, text):
        pre_text = text

        for link in self.links:
            if link["type"] == "dslfile":
                search_for = '"%s"' % link["name"]
                replace_with = '"[[%s|%s]]"' % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

                search_for = '"%s?' % link["name"]
                replace_with = '"[[%s|%s]]?' % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

            if link["type"] == "action":
                search_for = '"%s"' % link["name"]
                replace_with = "[[%s|%s]]" % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

            if link["type"] == "control":
                # search for the link name in quotes (e.g. '"Button"') and replace it with a page link
                search_for = '"%s"' % link["name"]
                replace_with = '"[[%s|%s]]"' % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)

            if link["type"] == "param":
                # search for the link name in quotes (e.g. '"Button"') and replace it with a page link
                search_for = '"%s"' % link["name"]
                replace_with = '"[[%s|%s]]"' % (link["link"], link["name"])
                text = text.replace(search_for, replace_with)
            
            """
            if text != pre_text:
                return text
            """

        return text

    def write_page_header(self, parent, source_file = None, source_documentation = None):
        # -------------------------------------------------------------------
        # create the auto-generated page warning
        # -------------------------------------------------------------------
        self.wiki_lines.append("''[This page was auto-generated by a script.  If you edit this page manually, your changes will be overwritten the next time the page is regenerated.]''")
        self.write_documentation_info(source_file, source_documentation)
        # -------------------------------------------------------------------
        # create the link back to the 'ZEN hierarchy' page
        # -------------------------------------------------------------------
        self.wiki_lines.append("")
        self.wiki_lines.append(parent)

        
    def write_documentation_info(self, source_file, source_documentation):
        if source_file != None:
            writer = WikiWriter(self.links, self.extensionLinks, site = self.site)
            writer.start_page()
            writer.write_dsl_file("%s" % source_file)
            writer.update_wiki_page(source_file)

            self.wiki_lines.append("")
            self.wiki_lines.append("The source for this documentation can be found in '[[%s]]'." % source_file)
            

        if source_documentation != None:
            self.wiki_lines.append("See [[%s]] for info on how to update this documentation." % source_documentation)

        pass

    def create_table_header(self, cols):
        self.wiki_lines.append('{| class="wikitable"')

        for col in cols:
            self.wiki_lines.append('! %s' % col)

    def create_table_row(self, data, cols):
        self.wiki_lines.append('|-')

        for col in cols:
            value = ""
            if data.has_key(col):           
                value = data[col] 

                value = self.json_files.create_link_if_found(value)
            self.wiki_lines.append('| %s' % value)

    def create_table_footer(self):
        self.wiki_lines.append('|}')
        

    def write_paragraphs(self, paragraphs):
        # create the example description paragraphs
        if type(paragraphs) == list:
            for paragraph in paragraphs:
                self.wiki_lines.append("%s" % self.create_link_if_found(paragraph))
                self.wiki_lines.append("")
        else:
            self.wiki_lines.append("%s" % self.create_link_if_found(paragraphs))
            self.wiki_lines.append("")
            
    def write_dsl_examples(self, doc, doc_folder, indent = "=="):
        # -------------------------------------------------------------------
        # create each of the DSL examples (if any)
        # -------------------------------------------------------------------
        if 'dslExamples' in doc:
            self.wiki_lines.append("")
            self.wiki_lines.append("%s DSL Examples %s" % (indent, indent))
            for example in doc['dslExamples']:

                if 'description' in example:
                    self.write_paragraphs(example['description'])

                # read and output the example code block
                if 'exampleFile' in example:
                    self.process_example(os.path.join(doc_folder, example['exampleFile']))

    def process_example(self, file_name):
        with open(file_name, "r") as example_file:
            # indent each line to create a wiki code block
            for line in example_file:
                self.wiki_lines.append(" %s" % self.create_quoted_link_if_found(line.rstrip()))

    def write_dsl_file(self, file_name):
        try:
            with open(file_name, "r") as example_file:
                dsl_json = json.loads(example_file.read())
                #self.process_dsl_json(dsl_json)

                # indent each line to create a wiki code block
                for line in json.dumps(dsl_json, indent = 2).split("\n"):
                    self.wiki_lines.append(" %s" % self.create_quoted_link_if_found(line.rstrip()))
        except:
            pass

    def process_dsl_json(self, dsl_json):
        if type(dsl_json) == list:
            self.process_elements_in_list(dsl_json)

        if type(dsl_json) == dict:                
            self.process_elements_in_dict(dsl_json)


    def process_elements_in_dict(self, dsl_json):
        for child_element_name in dsl_json:
            child_element = dsl_json[child_element_name]
            self.process_dsl_json(dsl_json)

    def process_elements_in_list(self, dsl_json):
        for child_element in dsl_json:
            self.process_dsl_json(child_element)




    def write_tohtmlfile(self, text, filepath):
        # create the example description paragraphs
        html = parse(text)
        with io.open(filepath, mode="wt", encoding="utf-8") as file:
            file.write(html)

    def write_table(self, columns, control, key, table_writer, row_writer, sort_key = "name"):
        self.create_table_header(columns)
        
        table_writer(control, False, key, row_writer, sort_key = sort_key)

        # end the table
        self.create_table_footer()

    def write_git_commit_table(self, header, repo_root, file_name, indent = "==", branch = "3.1"):
        repo = git.Repo(repo_root)
        commits = list(repo.iter_commits(branch, paths = "%s" % file_name ))

        if len(commits) > 0:
            self.wiki_lines.append("%s %s %s" % (indent, header, indent))
            self.create_table_header(["Date and Time", "Author", "Message"])

            for commit in commits:
                formatted_date = datetime.datetime.fromtimestamp(commit.authored_date).strftime('%a %d %b %Y %H:%M:%S')
                self.wiki_lines.append("|-")
                self.wiki_lines.append("| %s" % formatted_date)
                self.wiki_lines.append("| %s" % self.create_link_if_found(str(commit.author)))
                self.wiki_lines.append("| %s" % commit.summary)
                # print commit.summary

            # end the table
            self.create_table_footer()

    def write_git(self, file_name, indent = "==", repo_root = "../"):
        self.write_git_commit_table("Git Commits", repo_root, file_name, indent)

        if file_name.startswith("vcode.userportal/app/"):
            self.write_git_commit_table("Older Git Commits", "../../ZEN/vcode.userportal", file_name, indent, branch = "master")
        
        if file_name.startswith("vcode.userportal/zen/"):
            self.write_git_commit_table("Older Git Commits", "../../ZEN/zen.ui", file_name, indent, branch = "master")
        